/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicLayoutImport } from './routes/_public/layout'
import { Route as ProtectedLayoutImport } from './routes/_protected/layout'
import { Route as PublicResetPasswordImport } from './routes/_public/reset-password'
import { Route as PublicRegisterImport } from './routes/_public/register'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as PublicForgotPasswordImport } from './routes/_public/forgot-password'
import { Route as PublicTwoFactorIndexImport } from './routes/_public/two-factor/index'
import { Route as ProtectedPostsIndexImport } from './routes/_protected/posts/index'
import { Route as ProtectedAdminIndexImport } from './routes/_protected/admin/index'
import { Route as ProtectedAccountIndexImport } from './routes/_protected/account/index'
import { Route as PublicTwoFactorOtpImport } from './routes/_public/two-factor/otp'
import { Route as PublicAcceptInvitationInvitationIdIndexImport } from './routes/_public/accept-invitation/$invitationId/index'
import { Route as ProtectedPostsPostidIndexImport } from './routes/_protected/posts/$postid/index'
import { Route as ProtectedAdminOrganizationsIndexImport } from './routes/_protected/admin/organizations/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const PublicLayoutRoute = PublicLayoutImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedLayoutRoute = ProtectedLayoutImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PublicResetPasswordRoute = PublicResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicForgotPasswordRoute = PublicForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicTwoFactorIndexRoute = PublicTwoFactorIndexImport.update({
  id: '/two-factor/',
  path: '/two-factor/',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const ProtectedPostsIndexRoute = ProtectedPostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)

const ProtectedAdminIndexRoute = ProtectedAdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any).lazy(() =>
  import('./routes/_protected/admin/index.lazy').then((d) => d.Route),
)

const ProtectedAccountIndexRoute = ProtectedAccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)

const PublicTwoFactorOtpRoute = PublicTwoFactorOtpImport.update({
  id: '/two-factor/otp',
  path: '/two-factor/otp',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicAcceptInvitationInvitationIdIndexRoute =
  PublicAcceptInvitationInvitationIdIndexImport.update({
    id: '/accept-invitation/$invitationId/',
    path: '/accept-invitation/$invitationId/',
    getParentRoute: () => PublicLayoutRoute,
  } as any)

const ProtectedPostsPostidIndexRoute = ProtectedPostsPostidIndexImport.update({
  id: '/posts/$postid/',
  path: '/posts/$postid/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)

const ProtectedAdminOrganizationsIndexRoute =
  ProtectedAdminOrganizationsIndexImport.update({
    id: '/admin/organizations/',
    path: '/admin/organizations/',
    getParentRoute: () => ProtectedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public/forgot-password': {
      id: '/_public/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof PublicForgotPasswordImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/reset-password': {
      id: '/_public/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof PublicResetPasswordImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/two-factor/otp': {
      id: '/_public/two-factor/otp'
      path: '/two-factor/otp'
      fullPath: '/two-factor/otp'
      preLoaderRoute: typeof PublicTwoFactorOtpImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_protected/account/': {
      id: '/_protected/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof ProtectedAccountIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
    '/_protected/admin/': {
      id: '/_protected/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
    '/_protected/posts/': {
      id: '/_protected/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof ProtectedPostsIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
    '/_public/two-factor/': {
      id: '/_public/two-factor/'
      path: '/two-factor'
      fullPath: '/two-factor'
      preLoaderRoute: typeof PublicTwoFactorIndexImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_protected/admin/organizations/': {
      id: '/_protected/admin/organizations/'
      path: '/admin/organizations'
      fullPath: '/admin/organizations'
      preLoaderRoute: typeof ProtectedAdminOrganizationsIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
    '/_protected/posts/$postid/': {
      id: '/_protected/posts/$postid/'
      path: '/posts/$postid'
      fullPath: '/posts/$postid'
      preLoaderRoute: typeof ProtectedPostsPostidIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
    '/_public/accept-invitation/$invitationId/': {
      id: '/_public/accept-invitation/$invitationId/'
      path: '/accept-invitation/$invitationId'
      fullPath: '/accept-invitation/$invitationId'
      preLoaderRoute: typeof PublicAcceptInvitationInvitationIdIndexImport
      parentRoute: typeof PublicLayoutImport
    }
  }
}

// Create and export the route tree

interface ProtectedLayoutRouteChildren {
  ProtectedAccountIndexRoute: typeof ProtectedAccountIndexRoute
  ProtectedAdminIndexRoute: typeof ProtectedAdminIndexRoute
  ProtectedPostsIndexRoute: typeof ProtectedPostsIndexRoute
  ProtectedAdminOrganizationsIndexRoute: typeof ProtectedAdminOrganizationsIndexRoute
  ProtectedPostsPostidIndexRoute: typeof ProtectedPostsPostidIndexRoute
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedAccountIndexRoute: ProtectedAccountIndexRoute,
  ProtectedAdminIndexRoute: ProtectedAdminIndexRoute,
  ProtectedPostsIndexRoute: ProtectedPostsIndexRoute,
  ProtectedAdminOrganizationsIndexRoute: ProtectedAdminOrganizationsIndexRoute,
  ProtectedPostsPostidIndexRoute: ProtectedPostsPostidIndexRoute,
}

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
)

interface PublicLayoutRouteChildren {
  PublicForgotPasswordRoute: typeof PublicForgotPasswordRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
  PublicResetPasswordRoute: typeof PublicResetPasswordRoute
  PublicTwoFactorOtpRoute: typeof PublicTwoFactorOtpRoute
  PublicTwoFactorIndexRoute: typeof PublicTwoFactorIndexRoute
  PublicAcceptInvitationInvitationIdIndexRoute: typeof PublicAcceptInvitationInvitationIdIndexRoute
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicForgotPasswordRoute: PublicForgotPasswordRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
  PublicResetPasswordRoute: PublicResetPasswordRoute,
  PublicTwoFactorOtpRoute: PublicTwoFactorOtpRoute,
  PublicTwoFactorIndexRoute: PublicTwoFactorIndexRoute,
  PublicAcceptInvitationInvitationIdIndexRoute:
    PublicAcceptInvitationInvitationIdIndexRoute,
}

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(
  PublicLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof PublicLayoutRouteWithChildren
  '/forgot-password': typeof PublicForgotPasswordRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/reset-password': typeof PublicResetPasswordRoute
  '/two-factor/otp': typeof PublicTwoFactorOtpRoute
  '/account': typeof ProtectedAccountIndexRoute
  '/admin': typeof ProtectedAdminIndexRoute
  '/posts': typeof ProtectedPostsIndexRoute
  '/two-factor': typeof PublicTwoFactorIndexRoute
  '/admin/organizations': typeof ProtectedAdminOrganizationsIndexRoute
  '/posts/$postid': typeof ProtectedPostsPostidIndexRoute
  '/accept-invitation/$invitationId': typeof PublicAcceptInvitationInvitationIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof PublicLayoutRouteWithChildren
  '/forgot-password': typeof PublicForgotPasswordRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/reset-password': typeof PublicResetPasswordRoute
  '/two-factor/otp': typeof PublicTwoFactorOtpRoute
  '/account': typeof ProtectedAccountIndexRoute
  '/admin': typeof ProtectedAdminIndexRoute
  '/posts': typeof ProtectedPostsIndexRoute
  '/two-factor': typeof PublicTwoFactorIndexRoute
  '/admin/organizations': typeof ProtectedAdminOrganizationsIndexRoute
  '/posts/$postid': typeof ProtectedPostsPostidIndexRoute
  '/accept-invitation/$invitationId': typeof PublicAcceptInvitationInvitationIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_protected': typeof ProtectedLayoutRouteWithChildren
  '/_public': typeof PublicLayoutRouteWithChildren
  '/_public/forgot-password': typeof PublicForgotPasswordRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_public/reset-password': typeof PublicResetPasswordRoute
  '/_public/two-factor/otp': typeof PublicTwoFactorOtpRoute
  '/_protected/account/': typeof ProtectedAccountIndexRoute
  '/_protected/admin/': typeof ProtectedAdminIndexRoute
  '/_protected/posts/': typeof ProtectedPostsIndexRoute
  '/_public/two-factor/': typeof PublicTwoFactorIndexRoute
  '/_protected/admin/organizations/': typeof ProtectedAdminOrganizationsIndexRoute
  '/_protected/posts/$postid/': typeof ProtectedPostsPostidIndexRoute
  '/_public/accept-invitation/$invitationId/': typeof PublicAcceptInvitationInvitationIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/two-factor/otp'
    | '/account'
    | '/admin'
    | '/posts'
    | '/two-factor'
    | '/admin/organizations'
    | '/posts/$postid'
    | '/accept-invitation/$invitationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/two-factor/otp'
    | '/account'
    | '/admin'
    | '/posts'
    | '/two-factor'
    | '/admin/organizations'
    | '/posts/$postid'
    | '/accept-invitation/$invitationId'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/_public/forgot-password'
    | '/_public/login'
    | '/_public/register'
    | '/_public/reset-password'
    | '/_public/two-factor/otp'
    | '/_protected/account/'
    | '/_protected/admin/'
    | '/_protected/posts/'
    | '/_public/two-factor/'
    | '/_protected/admin/organizations/'
    | '/_protected/posts/$postid/'
    | '/_public/accept-invitation/$invitationId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/_public"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_protected": {
      "filePath": "_protected/layout.tsx",
      "children": [
        "/_protected/account/",
        "/_protected/admin/",
        "/_protected/posts/",
        "/_protected/admin/organizations/",
        "/_protected/posts/$postid/"
      ]
    },
    "/_public": {
      "filePath": "_public/layout.tsx",
      "children": [
        "/_public/forgot-password",
        "/_public/login",
        "/_public/register",
        "/_public/reset-password",
        "/_public/two-factor/otp",
        "/_public/two-factor/",
        "/_public/accept-invitation/$invitationId/"
      ]
    },
    "/_public/forgot-password": {
      "filePath": "_public/forgot-password.tsx",
      "parent": "/_public"
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/_public/register": {
      "filePath": "_public/register.tsx",
      "parent": "/_public"
    },
    "/_public/reset-password": {
      "filePath": "_public/reset-password.tsx",
      "parent": "/_public"
    },
    "/_public/two-factor/otp": {
      "filePath": "_public/two-factor/otp.tsx",
      "parent": "/_public"
    },
    "/_protected/account/": {
      "filePath": "_protected/account/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/admin/": {
      "filePath": "_protected/admin/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/posts/": {
      "filePath": "_protected/posts/index.tsx",
      "parent": "/_protected"
    },
    "/_public/two-factor/": {
      "filePath": "_public/two-factor/index.tsx",
      "parent": "/_public"
    },
    "/_protected/admin/organizations/": {
      "filePath": "_protected/admin/organizations/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/posts/$postid/": {
      "filePath": "_protected/posts/$postid/index.tsx",
      "parent": "/_protected"
    },
    "/_public/accept-invitation/$invitationId/": {
      "filePath": "_public/accept-invitation/$invitationId/index.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
